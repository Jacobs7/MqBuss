<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">



    <!-- 扫描controller -->
    <context:component-scan base-package="com.dp.controller"/>

    <!-- 扫描controller -->
    <context:component-scan base-package="com.dp.service"/>

    <!--1 ActiveMQ-->
    <bean id="springActivemqFactory" class="org.apache.activemq.ActiveMQConnectionFactory">

        <property name="brokerURL" value="tcp://127.0.0.1:61616" />
    </bean>

    <!--2.1  动态连接会根据资源打开或关闭-->
    <bean id="activemqFactoryPool" class="org.springframework.jms.connection.CachingConnectionFactory">
        <property name="targetConnectionFactory" ref="springActivemqFactory" />
    </bean>
    <bean id="jmsTemplatePool" class="org.springframework.jms.core.JmsTemplate">
       <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
       <property name="connectionFactory" ref="activemqFactoryPool" />
    </bean>

    <!--2.2  固定连接永不关闭-->
    <bean id="activemqFactorySingle" class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory" ref="springActivemqFactory" />
    </bean>
    <bean id="jmsTemplateSingle" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="activemqFactorySingle" />
    </bean>







    <!--这个是队列实例    -->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>queueMy</value>
        </constructor-arg>
    </bean>

    <!--这个是主题实例-->
    <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg>
            <value>topicMy</value>
        </constructor-arg>
    </bean>

    <!--消息监听器-->
    <bean id="msglistener" class="com.dp.listener.MqListener">

    </bean>

    <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="springActivemqFactory" />
        <property name="destination" ref="topicDestination" />
        <property name="messageListener" ref="msglistener" />
    </bean>





    <!-- 启动aop注解基于类的代理（这时需要cglib库），如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理将起作用 -->


    <!-- 返回ResponseBody响应类型 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>



    <!-- 配置静态资源，不被DispatcherServlet处理，增加缓存时间10秒 -->
    <!--<mvc:resources mapping="/favicon.ico" location="/favicon.ico"/>-->
    <!--<mvc:resources mapping="/resources/**" location="/resources/" cache-period="10"/>-->
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>
    <mvc:resources mapping="/swagger-ui.html" location="classpath:/META-INF/resources/"/>

    <!-- 上传文件配置 20*1024*1024即20M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
        <!--<property name="maxUploadSize" value="20971520"/>-->
        <!--<property name="defaultEncoding" value="UTF-8"/>-->
        <!--<property name="resolveLazily" value="true"/>-->
    <!--</bean>-->


    <!-- 根目录'/'对应页面 -->
    <mvc:view-controller path="/" view-name="/index.jsp"></mvc:view-controller>
    <mvc:resources mapping="/resources/**" location="/resources/" cache-period="10"/>
    <!-- 拦截器 -->
    <!--<mvc:interceptors>-->
        <!-- 获取登录信息 -->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/manage/**"/>-->
            <!--<bean class="com.dape.upms.server.interceptor.UpmsInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->

    <!-- 扫描controller -->
    <context:annotation-config></context:annotation-config>

    <!-- Jsp视图 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="1"/>
        <property name="prefix" value="/WEB-INF/page"/>
        <property name="suffix" value=""/>
        <property name="contentType" value="text/html; charset=utf-8"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    </bean>

</beans>